import { SzEngineClient } from './szengine/szengine_web_client';
import { SzEngine } from './abstracts/szEngine';
import { SzGrpcWebEnvironmentOptions } from './szGrpcWebEnvironment';
import { SzError } from './senzing/SzError';
import { SzGrpcWebBase } from './abstracts/szGrpcWebBase';
/** Options for initializing {@link:module:SzGrpcEngine} */
export interface SzGrpcWebEngineOptions extends SzGrpcWebEnvironmentOptions {
    client?: SzEngineClient;
}
/**
 * szGrpcWebEngine
 * Access the Senzing Engine module via gRPC over http 1.1
 *
 * @group SzGrpcClasses
 * @hideconstructor
 */
export declare class SzGrpcWebEngine extends SzGrpcWebBase implements SzEngine {
    /** @ignore */
    private _client;
    /** See {@link https://github.com/senzing-garage/knowledge-base/blob/main/lists/senzing-component-ids.md} */
    productId: string;
    /**
     * the client is the grpc client class generated by protoc.
     * Not intended for end-user use. We need these in case we have to re-connect or destroy from {@link: module:SzGrpcEnvironment} but shouldn't be in the docs.
     * @ignore
     */
    set client(value: SzEngineClient);
    /**
     * the client is the grpc client class generated by protoc.
     * Not intended for end-user use. We need these in case we have to re-connect or destroy from {@link: module:SzGrpcEnvironment} but shouldn't be in the docs.
     * @ignore
     */
    get client(): SzEngineClient;
    constructor(parameters: SzGrpcWebEngineOptions);
    /**
     * The addRecord method adds a record into the Senzing repository. Can be called as many times as desired and from multiple threads at the same time.
     * @param dataSourceCode Identifies the provenance of the data.
     * @param recordId The unique identifier within the records of the same data source.
     * @param recordDefinition A JSON document containing the record to be added to the Senzing repository.
     * @param engineFlags Flags used to control information returned. Defaults to 0.
     * @returns {Promise<string>}
     */
    addRecord(dataSourceCode: string, recordId: string | number, recordDefinition: any, engineFlags?: BigInt | number): Promise<string | SzError>;
    /**
     * The closeExport method closes the exported document created by exportJsonEntityReport. It is part of the export_json_entity_report, fetch_next, close_export lifecycle of a list of sized
     * @param exportHandle A handle created by exportJsonEntityReport or exportCsvEntityReport.
     * @returns {Promise<undefined>} for better support of async waiting
     */
    closeExportReport(exportHandle: number): Promise<unknown>;
    /**
     * The countRedoRecords method returns the number of records in need of redo-ing.
     * @returns {Promise<number>} The number of redo records in Senzingâ€™s redo queue.
     */
    countRedoRecords(): Promise<number>;
    /**
     * The deleteRecord method deletes a record from the Senzing repository.
     * @param dataSourceCode Identifies the provenance of the data
     * @param recordId The unique identifier within the records of the same data source.
     * @param flags Flags used to control information returned. Defaults to 0.
     * @returns {Promise<string>}
     */
    deleteRecord(dataSourceCode: string, recordId: string, flags?: BigInt | number): Promise<string | SzError>;
    /**
     * The exportCsvEntityReport method initializes a cursor over a document of exported
     * entities. It is part of the exportCsvEntityReport, fetchNext, closeExport lifecycle of a list of entities to export.
     *
     * @todo still need to work out how to sequentially call the fetchNext after this call.
     * recursive function maybe? promises are async so there's no guarantee that one will finish before the next.
     *
     * @warning not yet implemented
     */
    exportCsvEntityReport(): Promise<unknown>;
    /** NOT YET IMPLEMENTED */
    exportCsvEntityReportIterator(): Promise<unknown>;
    /**
     * The exportJsonEntityReport method initializes a cursor over a document of exported
     * entities. It is part of the exportJsonEntityReport, fetchNext, closeExport lifecycle of a list of entities to export.
     *
     * @todo still need to work out how to sequentially call the fetchNext after this call.
     * recursive function maybe? promises are async so there's no guarantee that one will finish before the next.
     */
    exportJsonEntityReport(flags?: BigInt | number): void;
    /**
     * NOT YET IMPLEMENTED
     * @todo still need to figure out why the stream reader is
     * immediately completing and returning no data. o_O
     *
     * tried 3 different ways, none of them are behaving like I would expect.
     */
    exportJsonEntityReportIterator(flags?: BigInt | number): Promise<unknown>;
    /**
     * NOT YET IMPLEMENTED
     *
     * @todo still need to work out how to sequentially call this after the exportJsonEntityReport call.
     * recursive function maybe? promises are async so there's no guarantee that one will finish before the next.
     */
    fetchNext(exportHandle: number): Promise<string | SzError>;
    /**
     * @todo document method
     * @param entityId
     * @param flags
     * @returns {Promise<string>}
     */
    findInterestingEntitiesByEntityId(entityId: number, flags?: BigInt | number): Promise<string | SzError>;
    /**
     * @todo document method
     * @param dataSourceCode
     * @param recordId
     * @param flags
     * @returns {Promise<string>}
     */
    findInterestingEntitiesByRecordId(dataSourceCode: string, recordId: string, flags?: BigInt | number): Promise<string | SzError>;
    /**
     * Finds all entities surrounding a requested set of entities. This includes the requested entities, paths between them, and relations to other nearby entities. Returns a JSON document that identifies the path between the each set of search entities (if the path exists), and the information for the entities in the path.
     * @param entityIds The entity IDs to find the network between.
     * @param maxDegrees The maximum number of degrees in paths between search entities.
     * @param buildOutDegrees The number of degrees of relationships to show around each search entity.
     * @param buildOutMaxEntities The maximum number of entities to return in the discovered network.
     * @param flags
     * @returns {Promise<string>} A JSON document.
     */
    findNetworkByEntityId(entityIds: string | Array<number | string>, maxDegrees?: number, buildOutDegrees?: number, buildOutMaxEntities?: number, flags?: BigInt | number): Promise<unknown>;
    /**
     * Finds all entities surrounding a requested set of entities by their RECORD_ID values. This includes the requested entities, paths between them, and relations to other nearby entities. Returns a JSON document that identifies the path between the each set of search entities (if the path exists), and the information for the entities in the path.
     * @param recordKeys The data source codes and record IDs to find the network between.
     * @param maxDegrees The maximum number of degrees in paths between search entities.
     * @param buildOutDegrees The number of degrees of relationships to show around each search entity.
     * @param buildOutMaxEntities The maximum number of entities to return in the discovered network.
     * @param flags Flags used to control information returned. Defaults to SzEngineFlags.SZ_FIND_PATH_DEFAULT_FLAGS.
     * @returns {Promise<string>} A JSON document.
     */
    findNetworkByRecordId(recordKeys: Array<[string, number | string]>, maxDegrees?: number, buildOutDegrees?: number, buildOutMaxEntities?: number, flags?: BigInt | number): Promise<unknown>;
    /**
     * Finds the most efficient relationship between two entities path based on the parameters and returns a JSON document with an ENTITY_PATHS section that details the path between the entities. The ENTITIES sections details information on the entities. Paths are found using known relationships with other entities. Paths are found using known relationships with other entities.
     * @todo Should accept both entity and record IDs in V4, test
     * @param startEntityId The entity ID for the starting entity of the search path.
     * @param endEntityId The entity ID for the ending entity of the search path.
     * @param maxDegrees The maximum number of degrees in paths between search entities.
     * @param avoidEntityIds The entity IDs to avoid when finding a path.
     * @param requiredDataSources The data source code(s) that must be in a path.
     * @param flags Flags used to control information returned. Defaults to SzEngineFlags.SZ_FIND_PATH_DEFAULT_FLAGS.
     * @returns {Promise<string>} A JSON document with an ENTITY_PATHS section that details the path between the entities.
     */
    findPathByEntityId(startEntityId: number, endEntityId: number, maxDegrees: number, avoidEntityIds?: Array<number>, requiredDataSources?: Array<string>, flags?: BigInt | number): Promise<unknown>;
    /**
     * Finds the most efficient relationship between two entities path based on the parameters by RECORD_ID values and returns a JSON document with an ENTITY_PATHS section that details the path between the entities. The ENTITIES sections details information on the entities. Paths are found using known relationships with other entities. The entities are identified by starting and ending records.
     * @param startDataSourceCode Identifies the provenance of the record for the starting entity of the search path.
     * @param startRecordId The unique identifier within the records of the same data source for the starting entity of the search path.
     * @param endDataSourceCode Identifies the provenance of the record for the ending entity of the search path.
     * @param endRecordId The unique identifier within the records of the same data source for the ending entity of the search path.
     * @param maxDegrees The maximum number of degrees in paths between search entities.
     * @param avoidRecordKeys The data source codes and record IDs to avoid when finding a path.
     * @param requiredDataSources The data source code(s) that must be in a path.
     * @param flags Flags used to control information returned. Defaults to SzEngineFlags.SZ_FIND_PATH_DEFAULT_FLAGS.
     * @returns {Promise<string>} A JSON document.
     */
    findPathByRecordId(startDataSourceCode: string, startRecordId: string, endDataSourceCode: string, endRecordId: string, maxDegrees: number, avoidRecordKeys?: Array<[string, number]>, requiredDataSources?: Array<string>, flags?: BigInt | number): Promise<unknown>;
    /**
     * Returns the identifier of the currently active Senzing engine configuration.
     * @returns {Promise<number>} The identifier of the active Senzing Engine configuration.
     */
    getActiveConfigId(): Promise<number | SzError>;
    /**
     * Returns entity data based on the ID of a resolved identity.
     * @param entityId The unique identifier of an entity.
     * @param flags Flags used to control information returned. Defaults to SzEngineFlags.SZ_ENTITY_DEFAULT_FLAGS.
     * @returns {Promise<string>} A JSON document.
     */
    getEntityByEntityId(entityId: number, flags?: BigInt | number): Promise<string | SzError>;
    /**
     * Returns entity data based on the ID of a record which is a member of the entity.
     * @param dataSourceCode Identifies the provenance of the data.
     * @param recordId The unique identifier within the records of the same data source.
     * @param flags Flags used to control information returned. Defaults to SzEngineFlags.SZ_ENTITY_DEFAULT_FLAGS.
     * @returns {Promise<string>} A JSON document.
     */
    getEntityByRecordId(dataSourceCode: string, recordId: string, flags?: BigInt | number): Promise<string | SzError>;
    /**
     * returns a JSON document of a single record from the Senzing repository. Can be called as many times as desired and from multiple threads at the same time.
     * @param dataSourceCode Identifies the provenance of the data.
     * @param recordId The unique identifier within the records of the same data source.
     * @param flags Flags used to control information returned. Defaults to SzEngineFlags.SZ_RECORD_DEFAULT_FLAGS.
     * @returns {Promise<string>} A JSON document of a single record.
     */
    getRecord(dataSourceCode: string, recordId: string, flags?: BigInt | number): Promise<string | SzError>;
    /**
     * The preprocess_record method tests adding a record into the Senzing datastore.
     * @param recordDefinition A JSON document containing the record to be tested.
     * @param flags Flags used to control information returned. Defaults to 0.
     * @returns {Promise<string>} A JSON document containing metadata as specified by the flags.
     */
    getRecordPreview(recordDefinition: string, flags?: BigInt | number): Promise<string | SzError>;
    /**
     * returns the next internally queued redo record from the Senzing repository. The processRedoRecord method is called to process the redo record retrieved by getRedoRecord.
     * @returns {Promise<string>} A JSON document.
     */
    getRedoRecord(): Promise<string | SzError>;
    /**
     * The get_stats method retrieves workload statistics for the current process. These statistics will automatically reset after retrieval.
     * @returns {Promise<string>} A JSON document.
     */
    getStats(): Promise<string | SzError>;
    /**
     * creates a view of a virtual entity using a list of existing loaded records. The virtual entity is composed of only those records and their features. Entity resolution is not performed.
     * @param recordKeys The data source codes and record IDs identifying records to create the virtual entity from.
     * @param flags Flags used to control information returned. Defaults to SzEngineFlags.SZ_HOW_ENTITY_DEFAULT_FLAGS.
     * @returns {Promise<string>} A JSON document.
     */
    getVirtualEntityByRecordId(recordKeys: Array<[string, string | number]>, flags?: BigInt | number): Promise<string | SzError>;
    /**
     * Determines and details steps-by-step how records resolved to a single entity.
     *
     * In most cases, how provides more detailed information than why as the resolution is detailed step-by-step.
     * @param entityId The unique identifier of an entity.
     * @param flags Flags used to control information returned. Defaults to SzEngineFlags.SZ_HOW_ENTITY_DEFAULT_FLAGS.
     * @returns {Promise<string>} A JSON document.
     */
    howEntityByEntityId(entityId: number, flags?: BigInt | number): Promise<string | SzError>;
    /**
     * Initializes high resource consumption components of Senzing used in some functions. If this call is not made, these resources are initialized the first time they are needed and can cause unusually long processing times the first time a function is called that requires these resources.
     * @returns{Promise<undefined>} for async/sync flow support
     */
    primeEngine(): Promise<unknown>;
    /**
     * Called to process the redo record retrieved by getRedoRecord.
     * @param redoRecord
     * @param flags
     * @returns {Promise<string>} A JSON document.
     */
    processRedoRecord(redoRecord: string, flags?: BigInt | number): Promise<string | SzError>;
    /**
     * The reevaluate_entity method reevaluates the specified entity.
     * @param entityId The unique identifier of an entity.
     * @param flags Flags used to control information returned. Defaults to 0.
     * @returns {Promise<string>}
     */
    reevaluateEntity(entityId: number, flags?: BigInt | number): Promise<string | SzError>;
    /**
     * The reevaluate_record method reevaluates a specific record.
     * @param dataSourceCode Identifies the provenance of the data.
     * @param recordId The unique identifier within the records of the same data source.
     * @param flags Flags used to control information returned. Defaults to 0.
     * @returns {Promise<string>} A JSON document. If flags are set to return the WITH_INFO response a JSON document containing the details, otherwise an empty JSON document.
     */
    reevaluateRecord(dataSourceCode: string, recordId: string, flags?: BigInt | number): Promise<string | SzError>;
    reinitialize(configId: number): Promise<unknown>;
    /**
     * The searchByAttributes method retrieves entity data based on a user-specified set of entity attributes.
     * @param attributes A JSON document with the attribute data to search for.
     * @param flags Defaults to SzEngineFlags.SZ_SEARCH_BY_ATTRIBUTES_DEFAULT_FLAGS.
     * @param searchProfile The name of a configured search profile. Defaults to "SEARCH".
     * @returns A JSON document as Promise<string>.
     */
    searchByAttributes(attributes: string | Map<any, any> | {
        [key: string]: any;
    }, flags?: BigInt | number, searchProfile?: string): Promise<string | SzError>;
    /**
     * The why_entities method determines why entities did not resolve or why they do relate.
     * @param entityId1 The entity ID for the starting entity of the search path.
     * @param entityId2 The entity ID for the ending entity of the search path.
     * @param flags Flags used to control information returned. Defaults to SzEngineFlags.SZ_WHY_ENTITY_DEFAULT_FLAGS.
     * @returns A JSON document as Promise<string>.
     */
    whyEntities(entityId1: number, entityId2: number, flags?: BigInt | number): Promise<unknown>;
    /**
     * Determines why a record is included in an entity.
     * @param dataSourceCode Identifies the provenance of the data.
     * @param recordId The unique identifier within the records of the same data source.
     * @param flags Flags used to control information returned. Defaults to SzEngineFlags.SZ_WHY_ENTITY_DEFAULT_FLAGS.
     * @returns A JSON document as Promise<string>.
     */
    whyRecordInEntity(dataSourceCode: string, recordId: string, flags?: BigInt | number): Promise<unknown>;
    /**
     * The why_records determines if any two records can or cannot resolve together, or if they relate.
     * @param dataSourceCode1 Identifies the provenance of the data.
     * @param recordId1 The unique identifier within the records of the same data source.
     * @param dataSourceCode2 Identifies the provenance of the data.
     * @param recordId2 The unique identifier within the records of the same data source.
     * @param flags Flags used to control information returned. Defaults to SzEngineFlags.SZ_WHY_ENTITY_DEFAULT_FLAGS
     * @returns A JSON document as Promise<string>.
     */
    whyRecords(dataSourceCode1: string, recordId1: string, dataSourceCode2: string, recordId2: string, flags?: BigInt | number): Promise<unknown>;
    /**
     * Compares the specified search attribute criteria against the entity
     * identified by the specified entity ID to determine why that entity was
     * or was not included in the results of a {@linkplain
     * #searchByAttributes(String, String, Set) "search by attributes"} operation.
     * <p>
     * The specified search attributes are treated as a hypothetical single-record
     * entity and the result of this operation is the {@linkplain
     * #whyEntities(long, long, Set) "why analysis"} of the entity identified
     * by the specified entity ID against that hypothetical entity.  The details
     * included in the response are determined by the specified flags.
     * <p>
     * If the specified search profile is <code>null</code> then the default
     * generic thresholds from the default search profile will be used for the
     * search candidate determination.  If your search requires different behavior
     * using alternate generic thresholds, please contact
     * <a href="mailto:support@senzing.com">support@senzing.com</a> for details
     * on configuring a custom search profile.
     * <p>
     *
     * @param attributes The search attributes defining the hypothetical record
     *                   to match and/or relate to in order to obtain the
     *                   search results.
     * @param entityId The entity ID identifying the entity to analyze against the
     *                 search attribute criteria.
     * @param searchProfile The optional search profile identifier, or
     *                      <code>null</code> if the default search profile
     *                      should be used for the search.
     * @param flags The optional {@link Set} of {@link SzFlag} instances belonging
     *              to the {@link SzFlagUsageGroup#SZ_WHY_SEARCH_FLAGS} group t
     *              control how the operation is performed and the content of the
     *              response, or <code>null</code> to default to {@link
     *              SzFlag#SZ_NO_FLAGS} or {@link SzFlag#SZ_WHY_SEARCH_DEFAULT_FLAGS}
    *              for the default recommended flags.
     * @returns The resulting JSON {@link String} describing the result of the
     *         why analysis against the search criteria.
     */
    whySearch(attributes: string, entityId: number, searchProfile?: string, flags?: BigInt | number): Promise<unknown>;
}
