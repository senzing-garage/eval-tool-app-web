"use strict";
/**
 * @fileoverview gRPC-Web generated client stub for szconfigmanager
 * @enhanceable
 * @public
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SzConfigManagerClient = void 0;
// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.19.1
// source: szconfigmanager.proto
/* eslint-disable */
// @ts-nocheck
const grpcWeb = __importStar(require("grpc-web"));
const szconfigmanager_pb = __importStar(require("./szconfigmanager_web_pb")); // proto import: "szconfigmanager.proto"
class SzConfigManagerClient {
    constructor(hostname, credentials, options) {
        this.methodDescriptorGetConfig = new grpcWeb.MethodDescriptor('/szconfigmanager.SzConfigManager/GetConfig', grpcWeb.MethodType.UNARY, szconfigmanager_pb.GetConfigRequest, szconfigmanager_pb.GetConfigResponse, (request) => {
            return request.serializeBinary();
        }, szconfigmanager_pb.GetConfigResponse.deserializeBinary);
        this.methodDescriptorGetConfigRegistry = new grpcWeb.MethodDescriptor('/szconfigmanager.SzConfigManager/GetConfigRegistry', grpcWeb.MethodType.UNARY, szconfigmanager_pb.GetConfigRegistryRequest, szconfigmanager_pb.GetConfigRegistryResponse, (request) => {
            return request.serializeBinary();
        }, szconfigmanager_pb.GetConfigRegistryResponse.deserializeBinary);
        this.methodDescriptorGetDefaultConfigId = new grpcWeb.MethodDescriptor('/szconfigmanager.SzConfigManager/GetDefaultConfigId', grpcWeb.MethodType.UNARY, szconfigmanager_pb.GetDefaultConfigIdRequest, szconfigmanager_pb.GetDefaultConfigIdResponse, (request) => {
            return request.serializeBinary();
        }, szconfigmanager_pb.GetDefaultConfigIdResponse.deserializeBinary);
        this.methodDescriptorGetTemplateConfig = new grpcWeb.MethodDescriptor('/szconfigmanager.SzConfigManager/GetTemplateConfig', grpcWeb.MethodType.UNARY, szconfigmanager_pb.GetTemplateConfigRequest, szconfigmanager_pb.GetTemplateConfigResponse, (request) => {
            return request.serializeBinary();
        }, szconfigmanager_pb.GetTemplateConfigResponse.deserializeBinary);
        this.methodDescriptorRegisterConfig = new grpcWeb.MethodDescriptor('/szconfigmanager.SzConfigManager/RegisterConfig', grpcWeb.MethodType.UNARY, szconfigmanager_pb.RegisterConfigRequest, szconfigmanager_pb.RegisterConfigResponse, (request) => {
            return request.serializeBinary();
        }, szconfigmanager_pb.RegisterConfigResponse.deserializeBinary);
        this.methodDescriptorReplaceDefaultConfigId = new grpcWeb.MethodDescriptor('/szconfigmanager.SzConfigManager/ReplaceDefaultConfigId', grpcWeb.MethodType.UNARY, szconfigmanager_pb.ReplaceDefaultConfigIdRequest, szconfigmanager_pb.ReplaceDefaultConfigIdResponse, (request) => {
            return request.serializeBinary();
        }, szconfigmanager_pb.ReplaceDefaultConfigIdResponse.deserializeBinary);
        this.methodDescriptorSetDefaultConfig = new grpcWeb.MethodDescriptor('/szconfigmanager.SzConfigManager/SetDefaultConfig', grpcWeb.MethodType.UNARY, szconfigmanager_pb.SetDefaultConfigRequest, szconfigmanager_pb.SetDefaultConfigResponse, (request) => {
            return request.serializeBinary();
        }, szconfigmanager_pb.SetDefaultConfigResponse.deserializeBinary);
        this.methodDescriptorSetDefaultConfigId = new grpcWeb.MethodDescriptor('/szconfigmanager.SzConfigManager/SetDefaultConfigId', grpcWeb.MethodType.UNARY, szconfigmanager_pb.SetDefaultConfigIdRequest, szconfigmanager_pb.SetDefaultConfigIdResponse, (request) => {
            return request.serializeBinary();
        }, szconfigmanager_pb.SetDefaultConfigIdResponse.deserializeBinary);
        if (!options)
            options = {};
        if (!credentials)
            credentials = {};
        options['format'] = 'text';
        this.client_ = new grpcWeb.GrpcWebClientBase(options);
        this.hostname_ = hostname.replace(/\/+$/, '');
        this.credentials_ = credentials;
        this.options_ = options;
    }
    getConfig(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/szconfigmanager.SzConfigManager/GetConfig', request, metadata || {}, this.methodDescriptorGetConfig, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/szconfigmanager.SzConfigManager/GetConfig', request, metadata || {}, this.methodDescriptorGetConfig);
    }
    getConfigRegistry(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/szconfigmanager.SzConfigManager/GetConfigRegistry', request, metadata || {}, this.methodDescriptorGetConfigRegistry, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/szconfigmanager.SzConfigManager/GetConfigRegistry', request, metadata || {}, this.methodDescriptorGetConfigRegistry);
    }
    getDefaultConfigId(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/szconfigmanager.SzConfigManager/GetDefaultConfigId', request, metadata || {}, this.methodDescriptorGetDefaultConfigId, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/szconfigmanager.SzConfigManager/GetDefaultConfigId', request, metadata || {}, this.methodDescriptorGetDefaultConfigId);
    }
    getTemplateConfig(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/szconfigmanager.SzConfigManager/GetTemplateConfig', request, metadata || {}, this.methodDescriptorGetTemplateConfig, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/szconfigmanager.SzConfigManager/GetTemplateConfig', request, metadata || {}, this.methodDescriptorGetTemplateConfig);
    }
    registerConfig(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/szconfigmanager.SzConfigManager/RegisterConfig', request, metadata || {}, this.methodDescriptorRegisterConfig, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/szconfigmanager.SzConfigManager/RegisterConfig', request, metadata || {}, this.methodDescriptorRegisterConfig);
    }
    replaceDefaultConfigId(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/szconfigmanager.SzConfigManager/ReplaceDefaultConfigId', request, metadata || {}, this.methodDescriptorReplaceDefaultConfigId, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/szconfigmanager.SzConfigManager/ReplaceDefaultConfigId', request, metadata || {}, this.methodDescriptorReplaceDefaultConfigId);
    }
    setDefaultConfig(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/szconfigmanager.SzConfigManager/SetDefaultConfig', request, metadata || {}, this.methodDescriptorSetDefaultConfig, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/szconfigmanager.SzConfigManager/SetDefaultConfig', request, metadata || {}, this.methodDescriptorSetDefaultConfig);
    }
    setDefaultConfigId(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/szconfigmanager.SzConfigManager/SetDefaultConfigId', request, metadata || {}, this.methodDescriptorSetDefaultConfigId, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/szconfigmanager.SzConfigManager/SetDefaultConfigId', request, metadata || {}, this.methodDescriptorSetDefaultConfigId);
    }
}
exports.SzConfigManagerClient = SzConfigManagerClient;
//# sourceMappingURL=szconfigmanager_web_client.js.map