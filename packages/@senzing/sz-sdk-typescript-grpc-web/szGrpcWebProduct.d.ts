import { SzProductClient as SzProductWebClient } from './szproduct/szproduct_web_client';
import { SzProduct } from './abstracts/szProduct';
import { SzGrpcWebEnvironmentOptions } from './szGrpcWebEnvironment';
import { SzGrpcWebBase } from './abstracts/szGrpcWebBase';
/**
 * options to initialize the {@link:SzGrpcProduct} class with
 */
export interface SzGrpcWebProductOptions extends SzGrpcWebEnvironmentOptions {
    client?: SzProductWebClient;
}
/**
 * Access the Senzing Product module via gRPC
 *
 * @group SzGrpcClasses
 * @hideconstructor
 * @class
 */
export declare class SzGrpcWebProduct extends SzGrpcWebBase implements SzProduct {
    /** @ignore */
    private _client;
    /** See {@link https://github.com/senzing-garage/knowledge-base/blob/main/lists/senzing-component-ids.md} */
    productId: string;
    /**
     * the client is the grpc client class generated by protoc
     * @ignore
     */
    set client(value: SzProductWebClient);
    /** the client is the grpc client class generated by protoc
     * @ignore
    */
    get client(): SzProductWebClient;
    constructor(parameters: SzGrpcWebProductOptions);
    /**
     * Retrieves information about the currently used license.
     * @returns {Promise<{[key: string]: any}>} JSON document containing Senzing license metadata.
     */
    getLicense(): Promise<{
        [key: string]: any;
    }>;
    /**
     * Returns the version of Senzing.
     * @returns {Promise<{[key: string]: any}>} JSON document containing metadata about the Senzing Engine version being used.
     */
    getVersion(): Promise<{
        [key: string]: any;
    }>;
}
