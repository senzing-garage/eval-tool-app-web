"use strict";
/**
 * @fileoverview gRPC-Web generated client stub for szdiagnostic
 * @enhanceable
 * @public
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SzDiagnosticClient = void 0;
// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.19.1
// source: szdiagnostic.proto
/* eslint-disable */
// @ts-nocheck
const grpcWeb = __importStar(require("grpc-web"));
const szdiagnostic_pb = __importStar(require("./szdiagnostic_web_pb")); // proto import: "szdiagnostic.proto"
class SzDiagnosticClient {
    constructor(hostname, credentials, options) {
        this.methodDescriptorCheckRepositoryPerformance = new grpcWeb.MethodDescriptor('/szdiagnostic.SzDiagnostic/CheckRepositoryPerformance', grpcWeb.MethodType.UNARY, szdiagnostic_pb.CheckRepositoryPerformanceRequest, szdiagnostic_pb.CheckRepositoryPerformanceResponse, (request) => {
            return request.serializeBinary();
        }, szdiagnostic_pb.CheckRepositoryPerformanceResponse.deserializeBinary);
        this.methodDescriptorGetFeature = new grpcWeb.MethodDescriptor('/szdiagnostic.SzDiagnostic/GetFeature', grpcWeb.MethodType.UNARY, szdiagnostic_pb.GetFeatureRequest, szdiagnostic_pb.GetFeatureResponse, (request) => {
            return request.serializeBinary();
        }, szdiagnostic_pb.GetFeatureResponse.deserializeBinary);
        this.methodDescriptorGetRepositoryInfo = new grpcWeb.MethodDescriptor('/szdiagnostic.SzDiagnostic/GetRepositoryInfo', grpcWeb.MethodType.UNARY, szdiagnostic_pb.GetRepositoryInfoRequest, szdiagnostic_pb.GetRepositoryInfoResponse, (request) => {
            return request.serializeBinary();
        }, szdiagnostic_pb.GetRepositoryInfoResponse.deserializeBinary);
        this.methodDescriptorPurgeRepository = new grpcWeb.MethodDescriptor('/szdiagnostic.SzDiagnostic/PurgeRepository', grpcWeb.MethodType.UNARY, szdiagnostic_pb.PurgeRepositoryRequest, szdiagnostic_pb.PurgeRepositoryResponse, (request) => {
            return request.serializeBinary();
        }, szdiagnostic_pb.PurgeRepositoryResponse.deserializeBinary);
        this.methodDescriptorReinitialize = new grpcWeb.MethodDescriptor('/szdiagnostic.SzDiagnostic/Reinitialize', grpcWeb.MethodType.UNARY, szdiagnostic_pb.ReinitializeRequest, szdiagnostic_pb.ReinitializeResponse, (request) => {
            return request.serializeBinary();
        }, szdiagnostic_pb.ReinitializeResponse.deserializeBinary);
        if (!options)
            options = {};
        if (!credentials)
            credentials = {};
        options['format'] = 'text';
        this.client_ = new grpcWeb.GrpcWebClientBase(options);
        this.hostname_ = hostname.replace(/\/+$/, '');
        this.credentials_ = credentials;
        this.options_ = options;
    }
    checkRepositoryPerformance(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/szdiagnostic.SzDiagnostic/CheckRepositoryPerformance', request, metadata || {}, this.methodDescriptorCheckRepositoryPerformance, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/szdiagnostic.SzDiagnostic/CheckRepositoryPerformance', request, metadata || {}, this.methodDescriptorCheckRepositoryPerformance);
    }
    getFeature(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/szdiagnostic.SzDiagnostic/GetFeature', request, metadata || {}, this.methodDescriptorGetFeature, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/szdiagnostic.SzDiagnostic/GetFeature', request, metadata || {}, this.methodDescriptorGetFeature);
    }
    getRepositoryInfo(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/szdiagnostic.SzDiagnostic/GetRepositoryInfo', request, metadata || {}, this.methodDescriptorGetRepositoryInfo, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/szdiagnostic.SzDiagnostic/GetRepositoryInfo', request, metadata || {}, this.methodDescriptorGetRepositoryInfo);
    }
    purgeRepository(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/szdiagnostic.SzDiagnostic/PurgeRepository', request, metadata || {}, this.methodDescriptorPurgeRepository, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/szdiagnostic.SzDiagnostic/PurgeRepository', request, metadata || {}, this.methodDescriptorPurgeRepository);
    }
    reinitialize(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/szdiagnostic.SzDiagnostic/Reinitialize', request, metadata || {}, this.methodDescriptorReinitialize, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/szdiagnostic.SzDiagnostic/Reinitialize', request, metadata || {}, this.methodDescriptorReinitialize);
    }
}
exports.SzDiagnosticClient = SzDiagnosticClient;
//# sourceMappingURL=szdiagnostic_web_client.js.map