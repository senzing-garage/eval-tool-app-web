import { SzDiagnosticClient } from './szdiagnostic/szdiagnostic_web_client';
import { SzDiagnostic } from './abstracts/szDiagnostic';
import { SzError } from './senzing/SzError';
import { CHECK_DATASTORE_PERFORMANCE_RESPONSE } from './types/szDiagnostic';
import { SzGrpcWebEnvironmentOptions } from './szGrpcWebEnvironment';
import { SzGrpcWebBase } from './abstracts/szGrpcWebBase';
export interface SzGrpcWebDiagnosticOptions extends SzGrpcWebEnvironmentOptions {
    client?: SzDiagnosticClient;
}
/**
 * SzGrpcDiagnostic
 * Access the Senzing Diagnostic module via gRPC
 *
 * @group SzGrpcClasses
 * @hideconstructor
 * @class
 */
export declare class SzGrpcWebDiagnostic extends SzGrpcWebBase implements SzDiagnostic {
    /** @ignore */
    private _client;
    /** See {@link https://github.com/senzing-garage/knowledge-base/blob/main/lists/senzing-component-ids.md} */
    productId: string;
    /**
     * the client is the grpc client class generated by protoc.
     * Not intended for end-user use. We need these in case we have to re-connect or destroy from {@link: module:SzGrpcEnvironment} but shouldn't be in the docs.
     * @ignore
     */
    set client(value: SzDiagnosticClient);
    /**
     * the client is the grpc client class generated by protoc.
     * Not intended for end-user use. We need these in case we have to re-connect or destroy from {@link: module:SzGrpcEnvironment} but shouldn't be in the docs.
     * @ignore
     */
    get client(): SzDiagnosticClient;
    constructor(parameters: SzGrpcWebDiagnosticOptions);
    /**
     * Performs inserts to determine rate of insertion.
     * @param secondsToRun Duration of the test in seconds.
     * @returns {Promise<CHECK_DATASTORE_PERFORMANCE_RESPONSE>} A JSON document
     */
    checkRepositoryPerformance(secondsToRun: number): Promise<CHECK_DATASTORE_PERFORMANCE_RESPONSE | SzError>;
    /**
     * Returns details of the datastore currently in use by Senzing.
     * @returns {Promise<string>}
     */
    getRepositoryInfo(): Promise<string>;
    /**
     * Returns diagnostic information of a feature. Not recommended for use.
     * @experimental
     * @param featureId The identifier of the feature to describe.
     * @returns {Promise<string>} A string containing a JSON document
     */
    getFeature(featureId: number): Promise<string>;
    /**
     * Removes every record in the Senzing repository.
     * @returns {Promise<undefined>} for async flow control.
     */
    purgeRepository(): Promise<undefined>;
    /**
     * Used by {@link SzGrpcEnvironment}. Not intended to be called directly by end-users.
     * @ignore
     * @param configId
     */
    reinitialize(configId: number): Promise<undefined | SzError>;
}
