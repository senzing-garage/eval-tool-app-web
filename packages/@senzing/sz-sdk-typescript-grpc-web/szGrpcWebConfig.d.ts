import { SzConfigClient as SzConfigWebClient } from './szconfig/szconfig_web_client';
import { SzConfig } from './abstracts/szConfig';
import { SzGrpcWebEnvironmentOptions } from './szGrpcWebEnvironment';
import { SzGrpcWebBase } from './abstracts/szGrpcWebBase';
/** options to initialize SzConfig class */
export interface SzGrpcWebConfigOptions extends SzGrpcWebEnvironmentOptions {
    client?: SzConfigWebClient;
    definition: string;
}
/**
 * SzConfig
 * Access the Senzing Config module via gRPC
 * @group SzGrpcClasses
 * @hideconstructor
 * @class
 */
export declare class SzGrpcWebConfig extends SzGrpcWebBase implements SzConfig {
    private _client;
    /** See {@link https://github.com/senzing-garage/knowledge-base/blob/main/lists/senzing-component-ids.md} */
    productId: string;
    /** config definition for this instance of SzConfig */
    private _definition;
    get definition(): string;
    set definition(value: string);
    /**
     * the client is the grpc client class generated by protoc.
     * Not intended for end-user use. We need these in case we have to re-connect or destroy from {@link: SzGrpcEnvironment} but shouldn't be in the docs.
     * @ignore
     */
    set client(value: SzConfigWebClient);
    /**
     * the client is the grpc client class generated by protoc.
     * Not intended for end-user use. We need these in case we have to re-connect or destroy from {@link: SzGrpcEnvironment} but shouldn't be in the docs.
     * @ignore
     */
    get client(): SzConfigWebClient;
    constructor(parameters: SzGrpcWebConfigOptions);
    /**
     * Adds a data source to an existing in-memory configuration.
     * @param dataSourceCode Name of data source code to add.
     * @returns {Promise<string>} JSON document listing the newly created data source
     */
    registerDataSource(dataSourceCode: string): Promise<string>;
    /**
     * Adds multiple data sources to an existing in-memory configuration.
     * @param {string[]} dataSourceCodes
     * @returns {Promise<string[]>} JSON documents for each datasource listing the newly created data source
     */
    registerDataSources(dataSourceCodes: string[]): Promise<string[]>;
    /**
     * Removes a data source from an existing in-memory configuration.
     * or {@link SzGrpcConfig#importConfig} methods.
     * @param dataSourceCode Name of data source code to delete.
     * @returns {Promise<undefined>} for async flow control
     */
    unregisterDataSource(dataSourceCode: string): Promise<boolean>;
    /**
     * Removed multiple data sources from an existing in-memory configuration.
     * @param {string[]} dataSourceCodes
     * @returns {Promise<string[]>} JSON documents for each datasource listing the newly created data source
     */
    unregisterDataSources(dataSourceCodes: string[]): Promise<{
        DSRC_CODE: string;
        DELETED: boolean;
    }[]>;
    /**
     * Returns a JSON document of data sources contained in an in-memory configuration.
     * @returns {Promise<{DSRC_ID: number, DSRC_CODE: string}[]>} containing a JSON document listing all of the data sources.
     */
    getDataSourceRegistry(): Promise<{
        DSRC_ID: number;
        DSRC_CODE: string;
    }[]>;
    /**
     * @param configDefinition
     * @returns {Promise<boolean>}
     */
    verifyConfig(configDefinition?: string): Promise<unknown>;
}
