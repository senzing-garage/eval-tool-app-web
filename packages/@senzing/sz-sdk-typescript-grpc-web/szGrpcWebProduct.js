"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SzGrpcWebProduct = void 0;
const szproduct_web_pb_1 = require("./szproduct/szproduct_web_pb");
const szproduct_web_client_1 = require("./szproduct/szproduct_web_client");
const SzError_1 = require("./senzing/SzError");
const szGrpcWebEnvironment_1 = require("./szGrpcWebEnvironment");
const szGrpcWebBase_1 = require("./abstracts/szGrpcWebBase");
/**
 * Access the Senzing Product module via gRPC
 *
 * @group SzGrpcClasses
 * @hideconstructor
 * @class
 */
class SzGrpcWebProduct extends szGrpcWebBase_1.SzGrpcWebBase {
    /**
     * the client is the grpc client class generated by protoc
     * @ignore
     */
    set client(value) {
        this._client = value;
    }
    /** the client is the grpc client class generated by protoc
     * @ignore
    */
    get client() {
        return this._client;
    }
    constructor(parameters) {
        const { connectionString, credentials, client, grpcOptions, grpcConnectionReadyTimeOut } = parameters;
        super(parameters);
        /** See {@link https://github.com/senzing-garage/knowledge-base/blob/main/lists/senzing-component-ids.md} */
        this.productId = "5056";
        if (grpcConnectionReadyTimeOut) {
            this.grpcConnectionReadyTimeOut = grpcConnectionReadyTimeOut;
        }
        if (client) {
            // if client was passed in use/reuse that
            this._client = client;
        }
        else if (connectionString) {
            // otherwise create client from options passed in
            this._client = new szproduct_web_client_1.SzProductClient(connectionString ? connectionString : szGrpcWebEnvironment_1.DEFAULT_CONNECTION_STRING);
        }
        else {
            // no client or connection params, throw
            throw new Error(`not enough parameters to initialize`);
        }
    }
    /**
     * Retrieves information about the currently used license.
     * @returns {Promise<{[key: string]: any}>} JSON document containing Senzing license metadata.
     */
    getLicense() {
        return new Promise((resolve, reject) => {
            if (!this.client) {
                reject(new SzError_1.SzNoGrpcConnectionError());
                return;
            }
            this.waitForReady(this.getDeadlineFromNow(), (err) => {
                if (err) {
                    reject(err);
                    return;
                }
                const request = new szproduct_web_pb_1.GetLicenseRequest();
                this.client.getLicense(request, this._metadata, (err, res) => {
                    if (err) {
                        reject(err);
                        return;
                    }
                    let result = JSON.parse(res.getResult());
                    //console.log("RESPONSE:\n\r", result);
                    resolve(result);
                });
            });
        });
    }
    /**
     * Returns the version of Senzing.
     * @returns {Promise<{[key: string]: any}>} JSON document containing metadata about the Senzing Engine version being used.
     */
    getVersion() {
        return new Promise((resolve, reject) => {
            if (!this.client) {
                reject(new SzError_1.SzNoGrpcConnectionError());
                return;
            }
            this.waitForReady(this.getDeadlineFromNow(), (err) => {
                if (err) {
                    reject(err);
                    return;
                }
                const request = new szproduct_web_pb_1.GetVersionRequest();
                this.client.getVersion(request, this._metadata, (err, res) => {
                    if (err) {
                        reject(err);
                        return;
                    }
                    let result = JSON.parse(res.getResult());
                    //console.log("RESPONSE:\n\r", result);
                    resolve(result);
                });
            });
        });
    }
}
exports.SzGrpcWebProduct = SzGrpcWebProduct;
//# sourceMappingURL=szGrpcWebProduct.js.map