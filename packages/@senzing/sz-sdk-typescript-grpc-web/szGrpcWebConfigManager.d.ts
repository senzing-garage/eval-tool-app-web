import { SzConfigClient } from './szconfig/szconfig_web_client';
import { SzConfigManagerClient } from './szconfigmanager/szconfigmanager_web_client';
import { SzConfigManager } from './abstracts/szConfigManager';
import { SzError } from './senzing/SzError';
import { SzGrpcWebEnvironmentOptions } from './szGrpcWebEnvironment';
import { SzGrpcWebBase } from './abstracts/szGrpcWebBase';
import { SzGrpcWebConfig as SzConfig, SzGrpcWebConfigOptions as SzConfigOptions } from './szGrpcWebConfig';
/** options to initialize SzConfigManager class */
export interface SzGrpcWebConfigManagerOptions extends SzGrpcWebEnvironmentOptions {
    client?: SzConfigManagerClient;
    configClient?: SzConfigClient;
}
/**
 * SzGrpcConfigManager
 * Access the Senzing ConfigManager module via gRPC
 *
 * @group SzGrpcClasses
 * @hideconstructor
 * @class
 */
export declare class SzGrpcWebConfigManager extends SzGrpcWebBase implements SzConfigManager {
    private _client;
    private _configClient;
    private _parameters;
    /** See {@link https://github.com/senzing-garage/knowledge-base/blob/main/lists/senzing-component-ids.md} */
    productId: string;
    /**
     * used for telling classes not to use live clients
     * @ignore */
    private isTestEnvironment;
    /**
     * the client is the grpc client class generated by protoc.
     * Not intended for end-user use. We need these in case we have to re-connect or destroy from {@link: module:SzGrpcEnvironment} but shouldn't be in the docs.
     * @ignore
     */
    set client(value: SzConfigManagerClient);
    /**
     * the client is the grpc client class generated by protoc.
     * Not intended for end-user use. We need these in case we have to re-connect or destroy from {@link: module:SzGrpcEnvironment} but shouldn't be in the docs.
     * @ignore
     */
    get client(): SzConfigManagerClient;
    /**
     * @internal
     */
    private get grpcParameters();
    constructor(parameters: SzGrpcWebConfigManagerOptions);
    /**
     * Creates a new {@link SzGrpcConfig} instance using the default
     * configuration template and returns the {@link SzGrpcConfig}
     * representing that configuration.
     */
    createConfig(): Promise<SzConfig>;
    /**
     * Gets the configuration definition that is registered with the
     * specified config ID and returns a new {@link SzGrpcConfig} instance
     * representing that configuration.
     */
    createConfig(configId: number): Promise<SzConfig>;
    /**
     * Creates a new {@link SzGrpcConfig} instance using the specified
     * configuration definition and returns the {@link SzGrpcConfig}
     * representing that configuration.
     * @param configDefinition
     */
    createConfig(configDefinition: string): Promise<SzConfig>;
    /**
     * Get the Configuration Document for the default configuration template.
     * @returns {Promise<string>} the configuration document
     */
    getTemplateConfig(): Promise<string>;
    /**
     * Registers the configuration described by the specified
     * configuration definition in the repository with the specified
     * comment. If a comment has not been provided an autogenerated one will be used.
     * @param configDefinition The configuration definition to register.
     * @param comment The comments for the configuration.
     * @returns {Promise<void>} The identifier for referencing the config in the entity repository.
     *
     * @throws SzException If a failure occurs.
     */
    registerConfig(configDefinition: string, comment?: string): Promise<number>;
    /**
     * Gets the list of saved configuration ID's with their comments and
     * timestamps and return the JSON describing them.
     *
     * @returns {Promise<string>} JSON document describing the configurations registered
     * in the entity repository with their identifiers, timestamps and comments.
     */
    getConfigRegistry(): Promise<string>;
    /**
     * Gets the configuration ID of the default configuration for the repository
     * and returns it.  If the entity repository is in the initial state and the
     * default configuration ID has not yet been set, then zero (0) is returned.
     * @returns {Promise<number>} identifier which identifies the current configuration in use.
     */
    getDefaultConfigId(): Promise<number>;
    /**
     * Registers the specified config definition with an autogenerated comment
     * and then sets the default configuration ID for the repository to the
     * configuration ID that is the result of that registration, returning
     * the config ID under which the configuration was registered.
     * @param configDefinition The configuration definition to register as the default.
     * @returns {Promise<number>}The configuration ID under which the configuration was registered.
     * @returns {Promise<SzException>} If a failure occurs.
     */
    setDefaultConfig(configDefinition: string): Promise<number>;
    /**
     * Registers the specified config definition with the specified comment
     * and then sets the default configuration ID for the repository to the
     * configuration ID that is the result of that registration, returning
     * the config ID under which the configuration was registered.
     * @param configDefinition The configuration definition to register as the default.
     * @param configComment The comments for the configuration.
     * @returns {Promise<number>}The configuration ID under which the configuration was registered.
     * @returns {Promise<SzException>} If a failure occurs.
     */
    setDefaultConfig(configDefinition: string, comment: string): Promise<number>;
    /**
     * Sets the default configuration for the repository to the specified
     * configuration ID.
     *
     * @see replaceDefaultConfigId
     * @param configId The configuration identifier of the Senzing Engine configuration to use as the default.
     * @returns {Promise<undefined>} for async flow control
     */
    setDefaultConfigId(configId: number): Promise<number | SzError> | undefined;
    /**
     * Replaces the old configuration identifier with a new configuration identifier
     * in the Senzing database. It is like a “compare-and-swap” instruction to serialize
     * concurrent editing of configuration. If {@param currentDefaultConfigId} is no longer
     * the “current configuration identifier”, the operation will fail. To simply set
     * the default configuration ID, use {@link setDefaultConfigId}.
     *
     * @param currentDefaultConfigId The configuration identifier to replace.
     * @param newDefaultConfigId  The configuration identifier to use as the default.
     * @returns {Promise<undefined>} for async flow control
     */
    replaceDefaultConfigId(currentDefaultConfigId: number, newDefaultConfigId: number): Promise<string>;
    /** @internal */
    get szConfigGrpcOptions(): SzConfigOptions;
    /** @internal */
    private createConfigFromDefinition;
    /** @internal */
    private createConfigFromConfigId;
    /** @internal */
    private createConfigFromTemplate;
    /**
     * Used for unit tests, avoids needing live grpc client connection
     * @ignore
     */
    private createConfigForTests;
}
